// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedule.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO Schedule (
  invocation_timestamp, 
  request_method, 
  request_url, 
  request_body, 
  request_header,
  request_query, 
  max_retries,
  request_body_type,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, 'Scheduled'
)
RETURNING id, invocation_timestamp, created_at, request_method, request_body_type, request_body, request_url, request_header, request_query, status, retries_no, max_retries, failure_reason
`

type CreateScheduleParams struct {
	InvocationTimestamp pgtype.Timestamptz
	RequestMethod       Method
	RequestUrl          string
	RequestBody         pgtype.Text
	RequestHeader       []byte
	RequestQuery        []byte
	MaxRetries          pgtype.Int4
	RequestBodyType     BodyType
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.InvocationTimestamp,
		arg.RequestMethod,
		arg.RequestUrl,
		arg.RequestBody,
		arg.RequestHeader,
		arg.RequestQuery,
		arg.MaxRetries,
		arg.RequestBodyType,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.InvocationTimestamp,
		&i.CreatedAt,
		&i.RequestMethod,
		&i.RequestBodyType,
		&i.RequestBody,
		&i.RequestUrl,
		&i.RequestHeader,
		&i.RequestQuery,
		&i.Status,
		&i.RetriesNo,
		&i.MaxRetries,
		&i.FailureReason,
	)
	return i, err
}

const incrementFailure = `-- name: IncrementFailure :one
UPDATE Schedule
SET 
  retries_no = retries_no + 1,
  failure_reason = $2,
  status = 'Failed'
WHERE id = $1
RETURNING id, invocation_timestamp, created_at, request_method, request_body_type, request_body, request_url, request_header, request_query, status, retries_no, max_retries, failure_reason
`

type IncrementFailureParams struct {
	ID            int32
	FailureReason pgtype.Text
}

func (q *Queries) IncrementFailure(ctx context.Context, arg IncrementFailureParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, incrementFailure, arg.ID, arg.FailureReason)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.InvocationTimestamp,
		&i.CreatedAt,
		&i.RequestMethod,
		&i.RequestBodyType,
		&i.RequestBody,
		&i.RequestUrl,
		&i.RequestHeader,
		&i.RequestQuery,
		&i.Status,
		&i.RetriesNo,
		&i.MaxRetries,
		&i.FailureReason,
	)
	return i, err
}

const listSchedule = `-- name: ListSchedule :many
SELECT id, invocation_timestamp, created_at, request_method, request_body_type, request_body, request_url, request_header, request_query, status, retries_no, max_retries, failure_reason FROM Schedule
WHERE status = 'Scheduled'
ORDER BY invocation_timestamp ASC
LIMIT $1
`

func (q *Queries) ListSchedule(ctx context.Context, limit int32) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, listSchedule, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.InvocationTimestamp,
			&i.CreatedAt,
			&i.RequestMethod,
			&i.RequestBodyType,
			&i.RequestBody,
			&i.RequestUrl,
			&i.RequestHeader,
			&i.RequestQuery,
			&i.Status,
			&i.RetriesNo,
			&i.MaxRetries,
			&i.FailureReason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const scheduleSuccss = `-- name: ScheduleSuccss :one
UPDATE Schedule
SET 
  status = 'Invoked'
WHERE id = $1
RETURNING id, invocation_timestamp, created_at, request_method, request_body_type, request_body, request_url, request_header, request_query, status, retries_no, max_retries, failure_reason
`

func (q *Queries) ScheduleSuccss(ctx context.Context, id int32) (Schedule, error) {
	row := q.db.QueryRow(ctx, scheduleSuccss, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.InvocationTimestamp,
		&i.CreatedAt,
		&i.RequestMethod,
		&i.RequestBodyType,
		&i.RequestBody,
		&i.RequestUrl,
		&i.RequestHeader,
		&i.RequestQuery,
		&i.Status,
		&i.RetriesNo,
		&i.MaxRetries,
		&i.FailureReason,
	)
	return i, err
}
